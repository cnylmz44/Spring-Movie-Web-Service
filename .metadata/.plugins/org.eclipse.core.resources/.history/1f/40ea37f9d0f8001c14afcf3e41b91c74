package springmovie.business.concretes;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;

import springmovie.business.abstracts.IMovieService;
import springmovie.entities.Movie;
import springmovie.entities.MovieInformation;

@Component
public class MovieManager implements IMovieService{
	
	@Override
	public List<Movie> search(String name) {
		// TODO Auto-generated method stub
		RestTemplate client = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.add("content-type","application/json");
		headers.add("authorization","apikey 2nQdEnX6qpUmaoIT9WPANc:4XK9FD3scr56zboC47Zmp8");
		String url = "https://api.collectapi.com/imdb/imdbSearchByName?query=" + name;
		//System.out.println(url);
		HttpEntity<?> requestEntity = new HttpEntity<>(headers);
		ResponseEntity<String> response = client.exchange(url, HttpMethod.GET, requestEntity, String.class);
		String responseBody = response.getBody();
		System.out.println(responseBody);
		ObjectMapper objectMapper = new ObjectMapper();
		List<Movie> movies = new ArrayList<Movie>();
		
		try {
			JsonNode node = objectMapper.readTree(responseBody);
			JsonNode resultNode = node.get("result");
			
			if(resultNode.isArray()) {
				ArrayNode moviesNode = (ArrayNode) resultNode;
				
				for(int i=0; i<moviesNode.size();i++) {
					JsonNode singleMovie = moviesNode.get(i);
					String title = singleMovie.get("Title").toString();
					String year = singleMovie.get("Year").toString();
					String imdbId = singleMovie.get("imdbID").toString();
					String type = singleMovie.get("Type").toString();
					System.out.println(title);
					//String poster = singleMovie.get("Poster").toString();
					
					Movie movie = new Movie();
					movie.setImdbID(imdbId);
					movie.setTitle(title);
					movie.setType(type);
					movie.setYear(year);
					//movie.setPoster(poster);
					movies.add(movie);
				}
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return movies;
	}

	@Override
	public boolean addToList(String id) {
		// TODO Auto-generated method stub
		RestTemplate client = new RestTemplate();
		HttpHeaders headers = new HttpHeaders();
		headers.add("content-type","application/json");
		headers.add("authorization","apikey 2nQdEnX6qpUmaoIT9WPANc:4XK9FD3scr56zboC47Zmp8");
		String url = "https://api.collectapi.com/imdb/imdbSearchById?movieId=" + id;
		HttpEntity<?> requestEntity = new HttpEntity<>(headers);
		ResponseEntity<String> response = client.exchange(url, HttpMethod.GET, requestEntity, String.class);
		String responseBody = response.getBody();
		//System.out.println(responseBody);
		ObjectMapper objectMapper = new ObjectMapper();
		
		try {
			JsonNode node = objectMapper.readTree(responseBody);
			JsonNode resultNode = node.get("result");
			//System.out.println(resultNode);
			String title = resultNode.get("Title").toString();
			String year = resultNode.get("Year").toString();
			String rated = resultNode.get("Rated").toString();
			
			MovieInformation movieInformation = new MovieInformation();
			movieInformation.setRated(rated);
			movieInformation.setTitle(title);
			movieInformation.setYear(year);
			
			String listedMovie = movieInformation.getTitle() + "****" + movieInformation.getYear() + "****" 
									+ movieInformation.getRated();
			
			System.out.println(listedMovie);
			
			String filePath = "/home/canyilmaz/Downloads/movie-list.txt";
			
			File file = new File(filePath);
			FileWriter fileWriter = new FileWriter(file,true); // for not overwriting to the .txt file
			BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
			
			bufferedWriter.write(listedMovie);
			bufferedWriter.newLine();
			bufferedWriter.close();
			fileWriter.close();
			
			return true;
			
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return false;
		}
	}

}
